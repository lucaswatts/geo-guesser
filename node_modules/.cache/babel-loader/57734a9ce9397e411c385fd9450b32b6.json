{"ast":null,"code":"var _jsxFileName = \"/Users/lucaswatts/Documents/Coding/Portfolio Projects/flash-react/src/Counter.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Counter() {\n  class Clock extends React.Component {\n    format(time) {\n      let seconds = time % 60;\n      let minutes = Math.floor(time / 60);\n      minutes = minutes.toString().length === 1 ? \"0\" + minutes : minutes;\n      seconds = seconds.toString().length === 1 ? \"0\" + seconds : seconds;\n      return minutes + ':' + seconds;\n    }\n\n    render() {\n      const {\n        time\n      } = this.props;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"displayedTime\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: this.format(time)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 13\n      }, this);\n    }\n\n  }\n\n  class Input extends React.Component {\n    onSubmit(event) {\n      event.preventDefault();\n      const strSeconds = this.refs.seconds.value;\n\n      if (strSeconds.match(/[0-9]/)) {\n        this.refs.seconds.value = '';\n        this.props.onSetCountdown(parseInt(strSeconds, 10));\n      }\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        ref: \"form\",\n        onSubmit: this.onSubmit.bind(this),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: \"seconds\",\n          placeholder: \"enter time in seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this);\n    }\n\n  }\n\n  class Button extends React.Component {\n    render() {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.props.onClickHandler,\n        children: this.props.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }, this);\n    }\n\n  }\n\n  class App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        count: 0,\n        running: false\n      };\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      if (this.state.running !== prevState.running) {\n        switch (this.state.running) {\n          case true:\n            this.handleStart();\n        }\n      }\n    }\n\n    handleStart() {\n      this.timer = setInterval(() => {\n        const newCount = this.state.count - 1;\n        this.setState({\n          count: newCount >= 0 ? newCount : 0\n        });\n      }, 1000);\n    }\n\n    handleStop() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.setState({\n          running: false\n        });\n      }\n    }\n\n    handleReset() {\n      this.setState({\n        count: 0\n      });\n    }\n\n    handleCountdown(seconds) {\n      this.setState({\n        count: seconds,\n        running: true\n      });\n    }\n\n    render() {\n      const {\n        count\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Clock, {\n          time: count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          onSetCountdown: this.handleCountdown.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          label: \"stop\",\n          onClickHandler: this.handleStop.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          label: \"reset\",\n          onClickHandler: this.handleReset.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this);\n    }\n\n  }\n\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 23\n  }, this), document.getElementById('app'));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"counter-container\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Press start, and see how many Country's you can match to their Capital Cities.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Counter;\nexport default Counter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/Users/lucaswatts/Documents/Coding/Portfolio Projects/flash-react/src/Counter.js"],"names":["React","Counter","Clock","Component","format","time","seconds","minutes","Math","floor","toString","length","render","props","Input","onSubmit","event","preventDefault","strSeconds","refs","value","match","onSetCountdown","parseInt","bind","Button","onClickHandler","label","App","constructor","state","count","running","componentDidUpdate","prevProps","prevState","handleStart","timer","setInterval","newCount","setState","handleStop","clearInterval","handleReset","handleCountdown","ReactDOM","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\n\nfunction Counter() {\n    class Clock extends React.Component {\n        format(time) {\n          let seconds = time % 60;\n          let minutes = Math.floor(time / 60);\n          minutes = minutes.toString().length === 1 ? \"0\" + minutes : minutes;\n          seconds = seconds.toString().length === 1 ? \"0\" + seconds : seconds;\n          return minutes + ':' + seconds;\n        }\n        render () {\n          const {time} = this.props;\n          return (\n            <div className=\"displayedTime\">\n              <h1>{this.format(time)}</h1>\n            </div>\n          )\n        }\n      }\n      \n      class Input extends React.Component {\n        \n        onSubmit(event) {\n          event.preventDefault();\n          const strSeconds = this.refs.seconds.value;\n          if(strSeconds.match(/[0-9]/)) {\n            this.refs.seconds.value = '';\n            this.props.onSetCountdown(parseInt(strSeconds, 10));\n          }\n        }\n        \n        render() {\n          return (\n            <form ref=\"form\" onSubmit={this.onSubmit.bind(this)}>\n              <input type=\"text\" ref=\"seconds\" placeholder=\"enter time in seconds\"/>\n              <input type=\"submit\" value=\"Start\"></input>\n            </form>\n          )\n        }\n      }\n      \n      class Button extends React.Component {\n        render() {\n          return (\n              <button onClick={this.props.onClickHandler}>{this.props.label}</button>    \n          );\n        }\n      }\n      \n      class App extends React.Component {\n        constructor(props) {\n          super(props);\n          this.state = {\n            count: 0,\n            running: false,\n          }\n        }\n        \n        componentDidUpdate(prevProps, prevState) {\n          if(this.state.running !== prevState.running){\n            switch(this.state.running) {\n              case true:\n                this.handleStart();\n            }\n          }\n        }\n        \n        handleStart() {\n          this.timer = setInterval(() => {\n            const newCount = this.state.count - 1;\n            this.setState(\n              {count: newCount >= 0 ? newCount : 0}\n            );\n          }, 1000);\n        }\n        \n        handleStop() {\n          if(this.timer) {\n            clearInterval(this.timer);\n            this.setState(\n              {running:false}\n            );\n          }\n        }\n        \n        handleReset() {\n          this.setState(\n            {count: 0}\n          );\n        }\n        \n        handleCountdown(seconds) {\n          this.setState({\n            count: seconds,\n            running: true\n          })\n        }\n        \n        render() {\n          const {count} = this.state;\n          return (\n            <div className=\"container\">\n              <Clock time={count}/>\n              <Input onSetCountdown={this.handleCountdown.bind(this)}/>\n              <Button label=\"stop\" onClickHandler={this.handleStop.bind(this)}/>\n              <Button label=\"reset\" onClickHandler={this.handleReset.bind(this)}/>\n            </div>\n          )\n        }\n      }\n      \n      ReactDOM.render(<App/>, document.getElementById('app'));\n\n\n\n    return (\n        <div id=\"counter-container\">\n            <p>Press start, and see how many Country's you can match to their Capital Cities.</p>\n        </div>\n    )\n}\n\nexport default Counter;"]},"metadata":{},"sourceType":"module"}